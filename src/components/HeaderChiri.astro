---
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import { SITE } from "@/config";

const { pathname } = Astro.url;
const currentPath = pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());
  return currentPath === path || currentPathArray[0] === pathArray[0];
};
---

<header class="chiri-header">
  <div class="header-content">
    <a href="/" class="site-title">
      {SITE.title}
    </a>
    <nav class="nav-links">
      <a href="/posts" class:list={{ active: isActive("/posts") }}>
        Posts
      </a>
      <a href="/tags" class:list={{ active: isActive("/tags") }}>
        Tags
      </a>
      <a href="/search" class:list={{ active: isActive("/search") }}>
        Search
      </a>
      <a href="/about" class:list={{ active: isActive("/about") }}>
        About
      </a>
      <button
        id="theme-btn"
        class="theme-toggle"
        aria-label="auto"
        title="Toggle theme"
      >
        <IconMoon id="moon-icon" class="icon" />
        <IconSunHigh id="sun-icon" class="icon hidden" />
      </button>
    </nav>
  </div>
</header>

<style>
  .chiri-header {
    width: 100%;
    padding: 2rem 0;
  }

  .header-content {
    max-width: 48rem;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .site-title {
    font-size: 1.125rem;
    font-weight: 500;
    color: var(--foreground);
    text-decoration: none;
    transition: opacity 0.15s ease-out;
  }

  .site-title:hover {
    opacity: 0.7;
  }

  .nav-links {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .nav-links a {
    font-size: 0.9375rem;
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.15s ease-out;
  }

  .nav-links a:hover,
  .nav-links a.active {
    color: var(--foreground);
  }

  .theme-toggle {
    padding: 0.25rem;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-secondary);
    transition: color 0.15s ease-out;
  }

  .theme-toggle:hover {
    color: var(--foreground);
  }

  .icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .hidden {
    display: none;
  }

  @media (max-width: 640px) {
    .nav-links {
      gap: 1rem;
    }

    .nav-links a {
      font-size: 0.875rem;
    }
  }
</style>

<script>
  function initTheme() {
    const theme = (() => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.setAttribute("data-theme", "light");
    } else {
      document.documentElement.setAttribute("data-theme", "dark");
    }
  }

  function toggleTheme() {
    const element = document.documentElement;
    const currentTheme = element.getAttribute("data-theme");
    const newTheme = currentTheme === "light" ? "dark" : "light";

    element.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);

    // Update icon visibility
    const moonIcon = document.getElementById("moon-icon");
    const sunIcon = document.getElementById("sun-icon");
    
    if (newTheme === "dark") {
      moonIcon?.classList.add("hidden");
      sunIcon?.classList.remove("hidden");
    } else {
      moonIcon?.classList.remove("hidden");
      sunIcon?.classList.add("hidden");
    }
  }

  // Initialize theme on first load
  initTheme();

  // Update icon based on initial theme
  document.addEventListener("DOMContentLoaded", () => {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    const moonIcon = document.getElementById("moon-icon");
    const sunIcon = document.getElementById("sun-icon");
    
    if (currentTheme === "dark") {
      moonIcon?.classList.add("hidden");
      sunIcon?.classList.remove("hidden");
    }
  });

  // Add click event to theme button
  document.addEventListener("DOMContentLoaded", () => {
    const themeBtn = document.getElementById("theme-btn");
    themeBtn?.addEventListener("click", toggleTheme);
  });

  // Listen to theme changes from other tabs
  document.addEventListener("astro:page-load", initTheme);
</script>