---
import { render, type CollectionEntry } from "astro:content";
import LayoutChiri from "@/layouts/LayoutChiri.astro";
import HeaderChiri from "@/components/HeaderChiri.astro";
import FooterChiri from "@/components/FooterChiri.astro";
import DateChiri from "@/components/DateChiri.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import { getReadingTime } from "@/utils/readingTime";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

// Calculate reading time from the post body
const readingTime = post.body ? getReadingTime(post.body) : 1;

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage && typeof initOgImage === "object" && "src" in initOgImage) {
  ogImageUrl = (initOgImage as any).src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  const slug = post.id.replace(/\.md$/, "");
  ogImageUrl = `/posts/${slug}/index.png`;
}

const ogImage = ogImageUrl ?? SITE.ogImage ?? "og.png";

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

// Find previous and next posts
const currentIndex = posts.findIndex(p => p.id === post.id);
const prevPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
const nextPost = currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;
---

<LayoutChiri {...layoutProps}>
  <main class="main-content">
    <div class="back-link">
      <a href="/">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M7 3L2 8L7 13" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M2 8H14" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <span>index</span>
      </a>
    </div>

    <article class="post-article">
      <header class="post-header">
        <h1 class="post-title">{title}</h1>
        <DateChiri {pubDatetime} {modDatetime} {readingTime} />
      </header>

      <div class="post-content prose">
        <Content />
      </div>
    </article>
  </main>
  <FooterChiri />
</LayoutChiri>

<script>
  // Mobile code block enhancement
  if (window.innerWidth <= 768) {
    document.addEventListener('DOMContentLoaded', () => {
      const codeBlocks = document.querySelectorAll('.post-content pre');
      
      codeBlocks.forEach(pre => {
        const code = pre.querySelector('code');
        if (!code) return;
        
        // Count lines
        const lines = code.textContent?.split('\n').length || 0;
        
        // If more than 15 lines, make it collapsible
        if (lines > 15) {
          pre.setAttribute('data-lines', lines.toString());
          pre.style.maxHeight = '20rem';
          pre.style.overflow = 'hidden';
          pre.style.cursor = 'pointer';
          pre.style.position = 'relative';
          
          // Create expand button
          const expandBtn = document.createElement('div');
          expandBtn.className = 'code-expand-btn';
          expandBtn.innerHTML = `
            <span class="expand-text">Show all ${lines} lines</span>
            <span class="collapse-text" style="display:none">Collapse</span>
          `;
          expandBtn.style.cssText = `
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 0.5rem;
            background: linear-gradient(to top, var(--code-bg) 70%, transparent);
            text-align: center;
            font-size: 0.75rem;
            color: var(--text-secondary);
            cursor: pointer;
            user-select: none;
          `;
          
          pre.appendChild(expandBtn);
          
          let expanded = false;
          
          const toggleExpand = () => {
            expanded = !expanded;
            if (expanded) {
              pre.style.maxHeight = 'none';
              expandBtn.querySelector('.expand-text').style.display = 'none';
              expandBtn.querySelector('.collapse-text').style.display = 'inline';
              expandBtn.style.background = 'var(--code-bg)';
              expandBtn.style.borderTop = '1px solid var(--border)';
              expandBtn.style.position = 'sticky';
            } else {
              pre.style.maxHeight = '20rem';
              expandBtn.querySelector('.expand-text').style.display = 'inline';
              expandBtn.querySelector('.collapse-text').style.display = 'none';
              expandBtn.style.background = 'linear-gradient(to top, var(--code-bg) 70%, transparent)';
              expandBtn.style.borderTop = 'none';
              expandBtn.style.position = 'absolute';
              // Scroll back to pre element
              pre.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
          };
          
          expandBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleExpand();
          });
        }
      });
    });
  }
</script>

<style>
  .main-content {
    max-width: 35rem;
    margin: 0 auto;
    padding: 2rem 1rem;
    min-height: calc(100vh - 12rem);
    width: 100%;
    box-sizing: border-box;
  }

  .back-link {
    margin-bottom: 2rem;
  }

  .back-link a {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    color: var(--text-secondary);
    font-size: 0.9375rem;
    transition: color 0.15s;
  }

  .back-link a:hover {
    color: var(--text-primary);
  }

  .back-link svg {
    width: 14px;
    height: 14px;
  }

  .post-article {
    margin-bottom: 4rem;
  }

  .post-header {
    margin-bottom: 2rem;
  }

  .post-title {
    font-size: 1.75rem;
    font-weight: var(--font-weight-bold);
    line-height: 1.2;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
    letter-spacing: -0.02em;
  }

  .post-content {
    font-size: 1.0625rem;
    line-height: 1.8;
    color: var(--text-primary);
    letter-spacing: -0.003em;
  }

  /* Drop cap for first paragraph */
  .post-content > p:first-of-type::first-letter {
    float: left;
    font-size: 3.75rem;
    line-height: 3.25rem;
    padding-right: 0.625rem;
    margin-top: -0.125rem;
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    font-family: var(--serif);
  }

  .post-content :global(h1),
  .post-content :global(h2),
  .post-content :global(h3),
  .post-content :global(h4),
  .post-content :global(h5),
  .post-content :global(h6) {
    font-family: var(--sans);
    font-weight: var(--font-weight-bold);
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }

  .post-content :global(h1) {
    font-size: 1.5rem;
  }

  .post-content :global(h2) {
    font-size: 1.25rem;
    letter-spacing: 0.025em;
    text-transform: uppercase;
    font-weight: var(--font-weight-regular);
  }

  .post-content :global(h3) {
    font-size: 1.125rem;
  }

  .post-content :global(p) {
    margin-bottom: 1.75rem;
  }

  .post-content :global(a) {
    color: var(--text-primary);
    text-decoration: none;
    position: relative;
    transition: opacity 0.2s ease;
    background-image: linear-gradient(var(--text-tertiary), var(--text-tertiary));
    background-size: 100% 1px;
    background-position: 0 100%;
    background-repeat: no-repeat;
    padding-bottom: 2px;
  }

  .post-content :global(a:hover) {
    opacity: 0.7;
    background-image: linear-gradient(var(--text-primary), var(--text-primary));
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    margin-bottom: 1.75rem;
    margin-left: 0;
    margin-right: 0;
    padding-left: 0;
    padding-right: 0;
    list-style-position: inside;
  }

  .post-content :global(li) {
    margin-bottom: 0.625rem;
    line-height: 1.8;
  }

  .post-content :global(blockquote) {
    border-left: 3px solid var(--text-tertiary);
    padding-left: 1.75rem;
    margin: 2.5rem 0;
    color: var(--text-secondary);
    font-style: italic;
    font-size: 1.125rem;
    line-height: 1.85;
    position: relative;
    background: linear-gradient(90deg, var(--code-bg) 0%, transparent 10%);
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .post-content :global(blockquote)::before {
    content: """;
    position: absolute;
    left: -0.125rem;
    top: -0.75rem;
    font-size: 3.5rem;
    color: var(--text-tertiary);
    font-family: var(--serif);
    opacity: 0.5;
  }

  /* Better emphasis styles */
  .post-content :global(strong) {
    font-weight: var(--font-weight-bold);
    letter-spacing: -0.01em;
  }

  .post-content :global(em) {
    font-style: italic;
  }

  .post-content :global(code) {
    background: var(--code-bg);
    padding: 0.125rem 0.25rem;
    border-radius: 0.125rem;
    font-size: 0.875rem;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    word-break: break-word;
    overflow-wrap: break-word;
  }

  .post-content :global(pre) {
    background: var(--code-bg);
    padding: 1.25rem;
    border-radius: 0.375rem;
    margin: 2rem -0.5rem;
    overflow-x: auto;
    white-space: pre;
    position: relative;
    border: 1px solid var(--border);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    scrollbar-width: thin;
    scrollbar-color: var(--text-tertiary) transparent;
  }

  .post-content :global(pre)::-webkit-scrollbar {
    height: 6px;
  }

  .post-content :global(pre)::-webkit-scrollbar-track {
    background: transparent;
  }

  .post-content :global(pre)::-webkit-scrollbar-thumb {
    background-color: var(--text-tertiary);
    border-radius: 3px;
  }

  .post-content :global(pre code) {
    background: none;
    padding: 0;
    font-size: 0.8125rem;
    line-height: 1.6;
    display: block;
    overflow-x: auto;
    white-space: pre;
    word-break: normal;
    overflow-wrap: normal;
  }

  /* Mobile-specific code block improvements */
  @media (max-width: 768px) {
    .post-content :global(pre) {
      margin: 1.5rem -1rem;
      padding: 0.75rem 1rem;
      border-radius: 0;
      border-left: none;
      border-right: none;
      font-size: 0.75rem;
      max-width: 100vw;
      overflow-x: hidden;
      overflow-y: hidden;
      position: relative;
      background: var(--code-bg);
      border-top: 1px solid var(--border);
      border-bottom: 1px solid var(--border);
    }
    
    .post-content :global(pre code) {
      font-size: 0.6875rem;
      line-height: 1.5;
      display: block;
      white-space: pre-wrap;
      word-wrap: break-word;
      word-break: break-word;
      hyphens: none;
      /* Preserve code structure while allowing wrapping */
      overflow-wrap: break-word;
    }
    
    /* Compact syntax for better mobile fit */
    .post-content :global(pre code .comment),
    .post-content :global(pre code .string) {
      word-break: break-word;
    }
    
    /* Even smaller font for very small screens */
    @media (max-width: 400px) {
      .post-content :global(pre) {
        padding: 0.625rem 0.75rem;
        margin: 1.25rem -0.75rem;
      }
      
      .post-content :global(pre code) {
        font-size: 0.625rem;
        line-height: 1.45;
      }
    }
  }
  
  /* Alternative: Expandable code blocks */
  @media (max-width: 768px) {
    .post-content :global(pre[data-lines]) {
      position: relative;
      max-height: 12rem;
      overflow: hidden;
    }
    
    .post-content :global(pre[data-lines][data-expanded="true"]) {
      max-height: none;
    }
    
    .post-content :global(pre[data-lines])::before {
      content: attr(data-lines) " lines";
      position: absolute;
      top: 0.25rem;
      right: 0.5rem;
      font-size: 0.625rem;
      color: var(--text-tertiary);
      background: var(--code-bg);
      padding: 0.125rem 0.375rem;
      border-radius: 0.25rem;
      z-index: 1;
      pointer-events: none;
    }
  }

  .post-content :global(hr) {
    border: none;
    margin: 3rem 0;
    text-align: center;
    position: relative;
  }

  .post-content :global(hr)::after {
    content: "◆ ◆ ◆";
    color: var(--text-tertiary);
    font-size: 0.75rem;
    letter-spacing: 0.5em;
    position: relative;
    top: -0.5rem;
  }

  /* Style P.S. sections differently */
  .post-content :global(hr + p) {
    font-size: 0.9375rem;
    color: var(--text-secondary);
    font-style: italic;
    line-height: 1.65;
  }

  @media (max-width: 768px) {
    .main-content {
      padding: 1.75rem 1.25rem;
      max-width: 100%;
    }

    .post-header {
      margin-bottom: 1.5rem;
    }

    .post-title {
      font-size: 1.5rem;
      line-height: 1.25;
    }

    .post-content {
      font-size: 1rem;
      line-height: 1.75;
    }

    .post-content :global(p) {
      margin-bottom: 1.5rem;
    }

    .post-content :global(blockquote) {
      margin: 2rem -1.25rem;
      padding-left: 1.25rem;
      padding-right: 1.25rem;
      border-left-width: 4px;
      background: var(--code-bg);
    }

    /* Better drop cap on mobile */
    .post-content > p:first-of-type::first-letter {
      font-size: 3.25rem;
      line-height: 2.75rem;
      padding-right: 0.5rem;
    }

    /* HR style adjustment for mobile */
    .post-content :global(hr)::after {
      font-size: 0.625rem;
      letter-spacing: 0.4em;
    }
  }
  
  @media (max-width: 640px) {
    .main-content {
      padding: 1.5rem 1rem;
    }

    .post-title {
      font-size: 1.375rem;
    }

    .post-content {
      font-size: 0.9375rem;
    }

    .back-link {
      margin-bottom: 1.5rem;
    }
  }
</style>