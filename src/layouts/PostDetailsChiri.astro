---
import { render, type CollectionEntry } from "astro:content";
import LayoutChiri from "@/layouts/LayoutChiri.astro";
import HeaderChiri from "@/components/HeaderChiri.astro";
import FooterChiri from "@/components/FooterChiri.astro";
import Datetime from "@/components/Datetime.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = await getPath(post.id, post.filePath) + ".png";
}

const ogImage = ogImageUrl ?? SITE.ogImage ?? "og.png";

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

// Find previous and next posts
const currentIndex = posts.findIndex(p => p.id === post.id);
const prevPost = currentIndex > 0 ? posts[currentIndex - 1] : null;
const nextPost = currentIndex < posts.length - 1 ? posts[currentIndex + 1] : null;
---

<LayoutChiri {...layoutProps}>
  <HeaderChiri />
  <main class="main-content">
    <article class="post-article">
      <header class="post-header">
        <h1 class="post-title">{title}</h1>
        <div class="post-meta">
          <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
        </div>
      </header>

      <div class="post-content prose">
        <Content />
      </div>

      {tags && tags.length > 0 && (
        <footer class="post-footer">
          <div class="post-tags">
            <span class="tags-label">Tags:</span>
            <div class="tags-list">
              {tags.map(tag => (
                <a href={`/tags/${slugifyStr(tag)}/`} class="tag">
                  #{tag}
                </a>
              ))}
            </div>
          </div>
        </footer>
      )}
    </article>

    <nav class="post-nav">
      {prevPost && (
        <a href={getPath(prevPost.id, prevPost.filePath)} class="nav-prev">
          <span class="nav-label">← Previous</span>
          <span class="nav-title">{prevPost.data.title}</span>
        </a>
      )}
      {nextPost && (
        <a href={getPath(nextPost.id, nextPost.filePath)} class="nav-next">
          <span class="nav-label">Next →</span>
          <span class="nav-title">{nextPost.data.title}</span>
        </a>
      )}
    </nav>
  </main>
  <FooterChiri />
</LayoutChiri>

<style>
  .main-content {
    max-width: 48rem;
    margin: 0 auto;
    padding: 0 1rem;
    min-height: calc(100vh - 12rem);
  }

  .post-article {
    margin-bottom: 4rem;
  }

  .post-header {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--border);
  }

  .post-title {
    font-size: 2.5rem;
    font-weight: 600;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    color: var(--foreground);
  }

  .post-meta {
    font-size: 0.9375rem;
    color: var(--text-secondary);
  }

  .post-content {
    font-size: 1rem;
    line-height: 1.8;
    color: var(--foreground);
  }

  .post-content :global(h1),
  .post-content :global(h2),
  .post-content :global(h3),
  .post-content :global(h4),
  .post-content :global(h5),
  .post-content :global(h6) {
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--foreground);
  }

  .post-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .post-content :global(a) {
    color: var(--foreground);
    text-decoration: underline;
    text-underline-offset: 2px;
    text-decoration-thickness: 1px;
  }

  .post-content :global(a:hover) {
    text-decoration-thickness: 2px;
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .post-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .post-content :global(blockquote) {
    border-left: 3px solid var(--border);
    padding-left: 1.5rem;
    margin: 2rem 0;
    color: var(--text-secondary);
    font-style: italic;
  }

  .post-content :global(code) {
    background: var(--muted);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
  }

  .post-content :global(pre) {
    background: var(--muted);
    padding: 1rem;
    border-radius: 0.375rem;
    overflow-x: auto;
    margin: 2rem 0;
  }

  .post-content :global(pre code) {
    background: none;
    padding: 0;
    font-size: 0.875rem;
  }

  .post-footer {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border);
  }

  .post-tags {
    display: flex;
    align-items: baseline;
    gap: 1rem;
  }

  .tags-label {
    font-size: 0.9375rem;
    color: var(--text-secondary);
  }

  .tags-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }

  .tag {
    font-size: 0.875rem;
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.15s ease-out;
  }

  .tag:hover {
    color: var(--foreground);
  }

  .post-nav {
    display: flex;
    justify-content: space-between;
    gap: 2rem;
    margin: 3rem 0;
    padding-top: 2rem;
    border-top: 1px solid var(--border);
  }

  .nav-prev,
  .nav-next {
    text-decoration: none;
    color: var(--text-secondary);
    transition: color 0.15s ease-out;
    max-width: 45%;
  }

  .nav-next {
    text-align: right;
    margin-left: auto;
  }

  .nav-prev:hover,
  .nav-next:hover {
    color: var(--foreground);
  }

  .nav-label {
    display: block;
    font-size: 0.875rem;
    margin-bottom: 0.25rem;
  }

  .nav-title {
    display: block;
    font-size: 0.9375rem;
    color: var(--foreground);
    line-height: 1.4;
  }

  @media (max-width: 640px) {
    .post-title {
      font-size: 1.875rem;
    }

    .post-content {
      font-size: 0.9375rem;
    }

    .post-nav {
      flex-direction: column;
      gap: 1.5rem;
    }

    .nav-prev,
    .nav-next {
      max-width: 100%;
      text-align: left;
    }
  }
</style>